Node PDX 2012
Date: 2012/2/11
http://nodepdx.github.com/
http://lanyrd.com/2012/nodepdx/

Saturday Morning.  (Unfiltered) 

Organizers: 
 * Troy Howard - welcome
 * Adrian Hall - http://nodepdx.github.com/sponsors

Live streaming at http://livestream.com/nodepdx
Twitter hash is #nodepdx

NodeJS, CouchDB, Neo4j, Redis, Coffee script, buzzword Sectacular!

@coderoshi - 

Instead - NCNRCSBuzzSpec

Who is Me? 
Eric Redmond
@coderoshi
github.com/coderoshi


Run All the Things - New frame work.

Follow along at: 
http://github.com/coderoshi/NCNRCSBuzzStpec


NodeJS

Simple and Powerful and has taken off so very quickly. 

Worlds shortest NodeJS Primer
 * Javascript-based reactor pattern with built-in tools like HTTP stuff
 * The reason you are here (probably) 



CouchDB 

Worlds shortest CouchDB Primer
 * Document datastore (like MongoDB) 
 * everything stored as JSON
 * interface thrue HTTP REST
 * Master/Master Replications   -> Sync 

Neo4j Primer

 * Graph Database
 * Everhting is a node or an edge
 * Nodes can have many edges connecting other nodes
 * Query by "walking" the graph from node to node
 * Support ACID Transactions, and up to 34B nodes and 34B edges


Redis

Key/Value Database
All values are keyed with some unique string
Super fast
 * 100,000 write/sec
 * 80,000 reads/sec
 * support complex datatypes (Lists, Hashes, sets and SortedSets)
 * Can do cool things like unions with sets 

CoffeeScript
 * REmove all {}, indent blocks instea on newlines
 * remove var keywords
 * strings interpolate vars withing #{}
 * Replace all "Funcitons(args...)"s with "(args....)->



Battle Plan 

 * Has a dataset of bands and memers of the band
 * Transform data in Redis
   * Band: The Beattles => (set of members)
   * artist: The Beatles:John Lennon => (Set of roles)
 * populate couchDB
   * {name: "NIN", artists: [ name:"Trent",roles: ["Sing",...],...
 * Keep couchdb and Neo4j in Sync
   * Artist nodes connected to band and role nodes
   * Makes searching on roles easy 
 * Web Interface 

CouchDB is not really great for comparing things in the database. It is not relational. 

Graph database is a great way for tracking relationships.

Polyglot persitant systems.

Makes some people nervous, but even a key/value + memcache is already that. 

Redis is a front-end cache for the system. 


---- 

Launch Redis + couchdb



pre_populate.coffee

---------------
csv=require ('csv')
redisClient = require('redis').createClient()
log = counsole.log

processedLines = 0

trackLIneCount = ->
  if ++preocessedLines % 1000 ==0
       log "Lines processed #{processedLines}"
       
populateRedis = ->
      file = csv().fromPath('group_membership.tsv',
             delimiter : '\t' , quote: '' )
             
      file.on 'data', (data,index) -> 
             artist = data[2]
             band = data[3]
             
             return trackLIneCount() if band == '' or  artist == ''
             
             roles = data [4].split ','
             roles = [] if roles.length == 1 and role[0] == ''
             
             redisClient.sadd "band:#{band}",artist 
             role.forEach (role) ->
                 redisClient.sadd("artist:#{band}:#{artist}")
                 
             trackLineCount()
             
        file.on 'end', (total_lines) ->
             redistClient.quit()
        
             
            
populateRedis()

For other code - get the GIT repository - https://github.com/coderoshi/NCNRCSBuzzSpec.git


Notes of new/interesting ideas:

Note: exports.X = X is a way to create access to a method across files

Use 
request.ed JSON.stringify(docs: docs)

 to put data into the body of the document 


Easy to create a database in couchdb. Just put at the root of the database with the name. 

Use Batching of requests together as a way to reduce the cost of network latency

Couchdb has a limit of batching 50 things at a time.


populateBands() if (!module.parent) 
as a way to  allow for inclusion vs running code. 

If you have one main function per script.

If you want to use neo4j and nodejs, don't use the driver , but use the one off this website. the old driver does not work on edgecases. 

Nodejs is fast, but it is kind of time at times. It can run out of sockets if you run to the end of sockets. Need to throttle connects for nodejs inside your app. 

Couch has a changes api , which is rediculously useful. 

When couch is changed, use this api to notify  Neo4JS  and Redis

Whenever you do a polyglot system, you always need a system that is the system of record. This is where you put the OFFICIAL copy that is the gold standard of where to store the data. 

The goal for Redis it to support the autocomplete for the webpages. 
The goal for Neo4js is to get easy access to relations

Uses an template page for html pages. 

Using gremlin to structure queries. 

There is a new query language called cipher -> graph traversal language influenced by Sparkle


Neo4j / Nodejs polyglot live coding brings to mind server side collections beats client-side. [Anyone doing client side?]  


Neo4js is difficult to do classification and so couchdb makes a better database of record. 

Redis is an in memory database. 
http://redis.io/

Redis is an open source, advanced key-value store. It is often referred to as a data structure server since keys can containstrings, hashes, lists, sets and sorted sets.

Neo4js
http://neo4j.org/

https://github.com/neo4j/neo4js

--- Break ----

Building Applications with  Bricks.js


http://github.com/JerrySievert/nodepdx-bricksjs.git

git:github.com/JerrySievert/nodepdx-bricksjs.git


Routes 
Function vs Plugin 

Matching is Easy

 * Regular Expressions
 * Functions
 * Custom Routing

Today we are writing a wiki

Plugins in Action. 

Anatomy of a Plug-in 


Getting Bricks.j

npm install bricks -g 

http://bricksjs.com

Let's create a Wiki

 * Git clone the git hub
 * backend - Node.js + MongoDB
 * Frontend - HTML
 * 

@JerrySievert on Twitter

http://github.com/JerrySievert
http://Legitimatesounding.com


Use NPM to set up your package.JSON file 


Using 
 * Bricks            - http://bricksjs.com/index.html
 * marked          - https://github.com/chjj/marked
 * mongoskin     - https://github.com/guileen/node-mongoskin
 * handlebars      - http://handlebarsjs.com/

Semantic Versioning - Semver.org

Settings Json file - List of routes
 * Database
 * Collection
 * edit
 * save
 * page

npm install bricks

node server.js


var bricks = require('bricks'),
    settings = require('./settings.json');
    
    var appServer = new bricks.appserver();
    
   
    appServer.addRoute(".+", appServer.plugins.filehandler, {basedir: "./htdocs"});
    appServer.addRoute(".+",appServer.plugins.fourohfour);
    
      appServer.addRoute(settings.edit,wikiHandler, { "some" : "stuff" });
      appServer.addRoute(settings.save,wikiHandler, { "some" : "more" });
      appServer.addRoute(settings.page,wikiHandler, { "some" : "more stuff" });
       
       ....
    
    Var server = appServer.createServer();
    
...

Writting function to process wiki pages on the fly...


http://mongohq.com

Gives a web interface to engage with a database

About 1/2 of the audiience has used MongoDB before. 


data = data || { } 

---- Ran into the wall. Out of time --- Hard to code live ----

See https://github.com/JerrySievert/nodepdx-bricksjs

Object Oriented patterns in Javascript by 
Jesse  Hallett - @hallettj
http://sitr.us/



http://compositecode.com/2012/01/19/jesse-hallett-to-present-object-oriented-patterns-in-javascript-nodepdx/


--- Traits.js
How to use traits to make better code in Smalltalk.
This is set of methods you can add on to an object. 

http://howtonode.org/traitsjs
http://ajaxian.com/archives/traits-js-new-trait-composition-library

---

seperate the namespaces and now we have solved the Name collision problem, but now we have broken Polymorphism.

What about Polymorphism?


ettiquette.js
b3gl: Etiquette.js -- An interesting attempt to bring protocols to JS.https://t.co/cBxWlACG #nodePDX

---

http://sitr.us/talks/oo-patterns/



---

Ward Cunningham 
Federation of Wikis


Wiki should not be all bound to one wiki.

Looking for a distributed wiki methodology

Single page application that can have multiple wiki pages from multiple pages, that are derived from each other. Sharing by copying.

Has a node.js express version that runs 

Currently a sinatra version by Ward.


@wardCunningham.

In 1997 wrote a paper for a minimalist federated Object server. 

Needed a better technology. Needed it to be safe. Need the ability to do sandboxes. 

---- 

Limits to growth for the use of the wiki. 

Agile methods came out of the Programming Patterns material on the C2 Wiki

Limits to growth
 * Population
 * Energy
 * Climate

Any time you have exponential growth, you are going to hit a limit.

See a book called - The limits of growth. 

2005 - 2015 was the prediction by the Club of Rome for when things would hit the inflection point. 

Folk Memory - Copy content over servers. 

Need to get to a New Framing 

A single page application, that handle multiple wiki pages, and which uses copying  and journaling. 

"Git Hub meets wikipedia" 

Need to have Creative Commons agreements - share alike to carry the content.

Smallest federated wiki

https://github.com/WardCunningham/Smallest-Federated-Wiki
http://c2.com/cgi/wiki?SmallestFederatedWiki


Make the F for Fork a complement to engage in the content across systems.


D3 Line

D3.js

Uses HTML5 Local Storage

Roles
 * Data Nerd
 * Manager
 * System Administrator
 * 
 * Community manager

Leadership 
Community
Technology

GitHub has transformed how I think about sharing. 

Allen Wirfs-brock - u

Faster instead of Better. 

Totally skips the taxonomy / ontology

-"Node is the furture of the server side"



---
ql.io

Subbu Allamaraju
@sallamar
http://www.subbu.org
http://ql.io/

Works for Ebay 
https://github.com/s3u/ql.io



Most clients need to make more than one request for user interaction.

Can we optimize the producers for every consumer?

Many companies like Netflicks are optimizing the process of collecting data. 

This is fun the first time.. After a while it is not fun.

Tasks
 * Parallellizing
 * Sequencing
 * Joining
 * Normalizing


Bad for Far away clients

Make it easy and fast to consume HTTP

Reduce lines of code you need to write
reduce bandwidth.

Reduces the lines of code from 320 lines to 12. 


A DSL for HTTP
An HTTP Gateway built on Node.js

Acts as a middle ground 

HTTP Crud to SQLish Crud

Create a table for each resources
select to read
insert into to add or create
update to update
deleted to delete

QL is an SQL like script

-
select long_url from bitly.shorten where  shortUrl = 'http://bit.ly/UZIvmy'


Select URL from bing.soap.search where q= 'ql.io'

Each sends back a JSON object with just what you need. 


You can put a cache in front or cache behind it as you like. There is no caching with ql.io


Trying to make it easy to read, something easy to write. Use a template to make the process easier. 

Projecting the table to select the data that you want. 

--- No Async Mind Bending

Sequential

Or Parallel 

don't need to know async IO and  don't need to know dependencies. 


npm install  ql.io-engine

http://www.slideshare.net/sallamar/qlio-at-nodepdx
http://t.co/dw4CbGxs

-----

iC: ql.io-engine unpacks latency by untangling http calls / @sallamarand @souders #2peasinapod / http://t.co/B3Bys6mX #nodepdx

git clone git@github.com:ql-io/ql.io-site.git to see the scripts behind all the examples on this site.


-----
NODE! Huh! What else is it good for? 
presented by Scott Koon
@lazycoder

 * Event driven SMTP server
 * Concrete - http://github.com/ryankee/concrete - test Build integration system.  - Continuous integration system 
 * Epub parser - http://github.com/andris9/epub
 * Javascript build tool - http://github.com/mde/jake 
 * MUD - github.com/shawncplus/ranviermud
 * Node Inspector / Debugger - http://github.com/dannycoates/node-inspector
 * SIGAR library for reporting - http://github.com/wdavidw/node-sigar
 * Node widow manager for X11 - http://mixu/nwm


Using a stiring hotplate connected to a node server to control by a cell phone

Hooked a Kinect to node and generated a canvas element. 



---------------------
---------------------

Day Two 
NodePDX
2012/02/12

DAY 2from 9am to 6pmSunday 12th February 2012

9:00am Meet n' Greet


9:30am Day 2 Kickoff 
Troy Howard and Adron Hall


10:00am 
Building a Real-time geolocation game with Geoloqi using Node.JS 
Kyle Drake


Building a realtime Geo-location game with GeoLoqi
Kyle Drake  - @kyledrake

http://geoloqi.com/iss  - Space station - Using Node + socket IO to do this. 

Deals with Proximal notification.

"Pop up a note at the grocery store - Hey don't forget the milk" when you go to the store

Other uses of Geoloqi
Spotsi is a company at PIEPDX, they are working on Discovering Tours

"People go to Voodoo Doughnuts and think that is the only thing to do in Portland, but there is more"

Map Attack - geolocation game

You have to physically go to a specific place to get points 

"When you play Map Attack, wear running shoes"

adron: @kyledrake showing the @geoloqi International Space Station tracking. #nodepdx #nodejs http://t.co/rdSHySTZ


Had problems when they got to 10 phones playing the game. 

Server Issues:
* Blocking IO
* Lots of concurrent traffic
* Not asynchronous

Using: 
Redis + geoloqi socketio + node.js + map attack server ( ngix+ruby ) 

Use Redis as a pub/sub

There is a persistant store that eventually gets all the information. 

REDIS
* Key Value Store
* amazing implementation of pub/sub
* so simple, you can actually understand it.

SEE EXAMPLES

Great for I have 5000 clients and they all need an update. 


They use custom data over UDP for Node.js

socket.io is awesome

sock.js is a new package worth exploring and see if they did a step up from socket.io

Message queues with Beanstalk

Workers pick tasks off the stack

Process data outside of the persistent store

Simpler than AMQP


The Reactor Pattern 

The reactor design pattern is a concurrent programming pattern for handling service requests delivered concurrently to a service handler by one more inputs"

Process the queue instead of blocking.

Man epoll on linux 


Concurrent IO is a common problem.

Most languages have an implementation of the Reactor pattern 

Javascript: node.js 
python: twisted
jruby: Native Threads

Ruby does not block on IO if you are using threads, so it does not exactly get to a reactor pattern, but you can get close to the same style of programming. 

But most people don't use ruby right and so they don't get the benefit. 

Made sinatra::synchrony - Node without callbacks.
Has since decided that people should not use this.  -> Do Not USE This. 

Threads are the way to go with ruby or python, that is what it is designed for.

But javascript is designed for the event loop. 

Drunkenbicycle.html

OH: "If you are missing some devs since last nights party, this is a way to find them"

== Performances ==

Database = your real persistence problem

answer: make the relevant data ROFLscaling your persitent data

Global write blocks is a problem on some new NoSQL systems.

Cloud services are often not fast enough.

Look at the Reddit state of the servers - Why Foursquare abandonded EBS. 
Realhardware + postgres is a key to the solution.
Bad sharding and memcache  was also the key to the root of the problem.


Real Server
Fusion IO

Cost $100K
Does 6 GB/s read
Does 4 GB/s write

The disk drive speed is critical to the process.
!! Get drives that save the write cache when there is a power failure. 

Look at the Intel 320 that does this right. 

Long Term 
Multi-master experiment (brewers Cap)
Riak 
Map Reduce does not work well as a database


3 things that you trade off in databases. 

Accessibility
Consistance
Partition tolerence

Use the geoloqi api to make geolocation games.

http://developers.geoloqi.com


11:00am 
BattleBots in the Clouds with Node.js 
 Ken Robertson  - @krobertson


From Cloud Foundry. - http://cloudfoundry.com/

set up battlebots / Cell wars with Node - Setting up a series of applications cross connecting. Uses Reis to organize dashboard. 

Paas.io as foundation. 


@paas_io
@invalidlogic
http://nodepdx.paas.io

ken@paas.io


1:00pm 
DRYing out your client-side apps 
 Garann Means - @garannm 
 
 From Texas. 
 
 Don't Repeat Yourself - DRY
 
 Node for Front End Developers - O'Reilly
 
 garann@gmail.com 
 
 
 How do we make resusable application coe
 
 Client side strictly presentational
 dhtml
 ajax
 explosing of JS libraries
 client-side apps (real work being done on the browser)
 
 Things that we can reuse:
 * models
 * views/templates
 * route patterns
 * external or third-party utilities. 
 
 Caveats
 * Only one way to import into node
 * models have to check their context
 * may need both sync or async
 * User interaction has to be abstracted
 * No global scope on server
 
 The Whats
 * Models are easy to share
 * Templates - Not all templates work both clientside and serverside
 * templates are used differently and loaded differently. 
 * Routes : Generic Functions or Publish/subscribe as  structures
 
 The Hows
 * Files live on client
 * pretend that you never heard of global scope
 * everything decoupled from DOM
 * pass reference to anything with state
 
 Create Server-side dom
 * exting tools to create dom in v8
 * slow
 * serverside Dom Rarely needed
 * it becomes onerous
 
 Organize materils at: 
 http://toolbox.no.de/
 
 Have our browsers acting more and more like servers. 
 
 @garannm: If you attended or watched my DRY talk, <3z. Slides are up! http://t.co/R0S1wulG Video's up, too!http://t.co/1fAzuz6F
 
2:00pm 
Building Node.JS Applications on Windows Azure 
Aaron

Working to get node.js a first class citizen on Windows Azure

MS thinks that Node.js is about the cross the chasm

Working with Joyent ot make it windows compatable.

Newest thing that they released is the ability to run mongodb replica set. 

IIS node - Node inside IIS

Azure is:
* Azure compute
* Azure storage - Blobs
* Azure table storage - Key/value pairs
* Azure queues - Durable queues. 
* Service Bus - A push based queue system. + pub/sub
* SQLizer - SQL as a service. 
* App fabric cache
* Access control service


Code examples - 
Uses Cloud9  for demo

aaronontheweb/dpehelloworld
http://cloud9ide.com/aaronontheweb ---> Behind firewall

http://c9.io


SEE EXAMPLE CODE

Demo of A Table Query

Demo of a large jquery tree view of a data store. 

Stuffing Node into IIS. 
github.com:/tjanczuk/iisnode/wiki

The MS model seems like they keep wanting to do things for you. Make it simpler for people by doing things for them and removing options. 

You can display the log directly in a browser request. 


With a replica set, you must have 3 instances up at any given time.

Showing all the code for the mongodb replica

Consistancy in a replica set should happen in 1-2 seconds , if it takes longer, then it probably needs to be fixed. 

There is a bizspark gets 3 years of azure. 

Startups can get bizspark for free. 


https://github.com/Aaronontheweb/httplogger


http://github.com/bnoguchi/everyauth

http://github.com/pekim/tedious


3:00pm 
Geddy - A better framework for building apps on node 
Daniel Erickson - @TechWraith

http://geddyjs.org

Works at Yammer - https://www.yammer.com/

Framework for the web on Node. 

Have two services in Node: 

Have a collaboration editng service. 

After the prototype stage, you end up with spagetti

Frameworks help you get rid of spagetti

What is out there now as a framework
* Ruby on Rails
    Monlithic
    convention over configuration
* Django
    Has modules
    python
    convention with configuration
* Merb
    Modularized Rails
    
For Node
* Connect
    gives middleware
    problems with buffered requests which causes memory issues on scale
    No structure 
*  Express
        Built on connect
        Get routes, sinatra like 
        No structure
        No models
        Express has all the problems of connect
*  Flatiron
        Developed by ninjitsu guys
        supports modules
        no structure

*  Geddy 
        Has structure
        Authored by 
 *         Matt Eernisse (highlife)
 *         Mike Ihbe
 *         Daniel Erickson 

            Built in 2010
            rebuilt over 2011 - refactored in the Fall 2011
            
            Geddy v2 released 
Features
*     Generators -  geddy app your-app
*     Views
*     Controllers
*     Resources - geddy resource user
*     Routes 
*     Content negotiation - id + id.json
*    Models - Model validation
*    You can share the code on the front end and the back end
*     Has bootstrap and jquery built in. 
*     EJS templates (vs jade or handlebars) , easy to swap out
*     Logging
*     Metrics - instrument your code out of the box. (npm install metrics) 
*     Buffered streams
*     Process clustering

1) Generate the app - 
    /app
    /app/controllers
    /app/models
    /app/views
    /apps/views/layouts
    /apps/views/main
    /config
    
    
    cd test_app
    geddy
    
    http://localhost:4000
    
    npm install -g jake geddy
    
    fork on git hub at 
    
    http://github.com/mde/geddy
    
    TechWraith: My GeddyJS talk at #nodepdx was recorded, here's the link: http://t.co/OQ4PTShG
    
    



4:00pm 
Better Together: Building Scalable Real Time Collaborative Apps with Node.js
Kav Latiolais  - @kavla


LIFFFT


Need to have a way for users to interact with the app when no-one else is around, then it is hard to get to critical mass. Make sure that single-user mode works. 

Uses
 * express
 * backbone.js
 * socket.io
 * coffeescript


Don't change your models on the client , ever. Let the server change the models.

Model validation needs to happen at the node level. 

How do you do MVC in this world
- Controller on the server
- View code on the client
- Model is on both client and server, but only changes on the Server. 

This does not work well for local cached data. 

In this model, the master copy is on the server. 

Time thru the server is under a second. 
"if you do the code right"
Even with thousands of users.

Bringing people to collaborative experiences is a stone soup experience. 

Janrain has a tool that gives a wider authentication tool. 
https://github.com/janrain
http://www.readwriteweb.com/hack/2010/08/quickly-enable-social-logins-w.php

Backbone is not appropriate for lots of game sprints and keeping track of lots of objects in a game. 

Collaborative editing is about the same as most multi-player games. 

mobwrite is a good tool to look at for collaborative editing 
http://code.google.com/p/google-mobwrite/

Git hub project - grant ggodo - empty now, soon to be interesting 

https://github.com/ggoodale









---------
Things we have talked about:

Node.js - http://nodejs.org/

express.js - http://expressjs.com/
coffeescript.js - http://coffeescript.org/
backbone.js - http://documentcloud.github.com/backbone/
bricks.js - http://bricksjs.com
marked          - https://github.com/chjj/marked
mongoskin     - https://github.com/guileen/node-mongoskin
etiquette.js - 
traits.js


Templating
Handlebars - http://handlebarsjs.com/


Database
Redis - http://redis.io/
Neo4j - http://neo4j.org/
couchdb  - http://couchdb.apache.org/
mongodb - http://www.mongodb.org/

Gremlin  - https://github.com/tinkerpop/gremlin/wiki
D3 - http://mbostock.github.com/d3/

Toolbox - http://toolbox.no.de/

Cloud9 - http://c9.io

Geddy - http://geddyjs.org




--------
GIT NOTES


Notes: Thinklikeagit
Think-like-a-git.com 
gitflow


fork 
clone 
edit
add
commit
push 
push origin master


Progit - read the first 4 chapters of that. 


gitsquash


